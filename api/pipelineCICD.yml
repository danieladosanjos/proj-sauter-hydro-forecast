name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: project-sauter-hydro-forecast
  GAR_LOCATION: us-central1
  SERVICE_NAME: sauter-api
  REGION: us-central1

jobs:
  test:
    name: 🧪 Executar Testes
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Lint com flake8
        run: |
          pip install flake8
          # Para por em caso de erros de sintaxe ou nomes não definidos
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Avisos para complexidade e tamanho de linha
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🧪 Executar testes com pytest
        run: |
          python -m pytest api/tests/ -v --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: 📊 Gerar relatório de cobertura
        run: |
          pip install coverage
          coverage run -m pytest api/tests/
          coverage report
          coverage xml

      - name: ☂️ Upload do relatório de cobertura
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: 🔒 Verificação de Segurança
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Instalar dependências de segurança
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: 🔍 Verificar vulnerabilidades de segurança
        run: |
          bandit -r api/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: 📤 Upload dos relatórios de segurança
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    name: 🐳 Build da Imagem Docker
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔐 Autenticar no GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: ☁️ Configurar gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: 🏗️ Configurar Docker para usar gcloud como helper
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: 📝 Gerar tag da imagem
        id: image-tag
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "tag=prod-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "tag=dev-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: 🐳 Build e push da imagem Docker
        run: |
          IMAGE_URI=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/sauter-repo/$SERVICE_NAME:${{ steps.image-tag.outputs.tag }}
          
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: 📤 Salvar URI da imagem
        run: |
          echo $IMAGE_URI > image-uri.txt

      - name: 📤 Upload do artefato da imagem
        uses: actions/upload-artifact@v4
        with:
          name: image-uri
          path: image-uri.txt

  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📥 Download do artefato da imagem
        uses: actions/download-artifact@v4
        with:
          name: image-uri

      - name: 🔐 Autenticar no GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: ☁️ Configurar gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy para Cloud Run (Staging)
        run: |
          IMAGE_URI=$(cat image-uri.txt)
          
          gcloud run deploy $SERVICE_NAME-staging \
            --image=$IMAGE_URI \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --timeout=300 \
            --set-env-vars="ENVIRONMENT=staging" \
            --tag=staging

      - name: 📝 Obter URL do serviço
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region=$REGION --format='value(status.url)')
          echo "🌐 Staging URL: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: 🧪 Smoke test
        run: |
          sleep 30  # Aguardar o serviço ficar disponível
          curl -f $SERVICE_URL/docs || (echo "❌ Smoke test falhou" && exit 1)
          echo "✅ Smoke test passou!"

  deploy-production:
    name: 🚀 Deploy Produção
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📥 Download do artefato da imagem
        uses: actions/download-artifact@v4
        with:
          name: image-uri

      - name: 🔐 Autenticar no GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: ☁️ Configurar gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy para Cloud Run (Produção)
        run: |
          IMAGE_URI=$(cat image-uri.txt)
          
          gcloud run deploy $SERVICE_NAME \
            --image=$IMAGE_URI \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --memory=2Gi \
            --cpu=2 \
            --max-instances=100 \
            --timeout=300 \
            --set-env-vars="ENVIRONMENT=production"

      - name: 📝 Obter URL do serviço
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "🌐 Production URL: $SERVICE_URL"

      - name: 🧪 Smoke test produção
        run: |
          sleep 30
          curl -f $SERVICE_URL/docs || (echo "❌ Smoke test produção falhou" && exit 1)
          echo "✅ Smoke test produção passou!"

      - name: 🏷️ Criar tag de release
        if: success()
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          TAG="v$(date +'%Y%m%d')-$(echo $GITHUB_SHA | cut -c1-7)"
          git tag $TAG
          git push origin $TAG

  notification:
    name: 📢 Notificação
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📢 Notificar sucesso
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "✅ Deploy realizado com sucesso!"

      - name: 📢 Notificar falha
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Deploy falhou!"