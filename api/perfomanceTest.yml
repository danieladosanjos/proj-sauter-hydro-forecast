name: 🚀 Performance Test

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL do serviço para testar'
        required: true
        default: 'https://sauter-api-staging-123456-uc.a.run.app'
      duration:
        description: 'Duração do teste (ex: 30s, 5m)'
        required: false
        default: '30s'
      concurrent_users:
        description: 'Número de usuários simultâneos'
        required: false
        default: '10'

jobs:
  performance:
    name: 🚀 Teste de Performance
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📦 Instalar K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🏗️ Criar script de teste
        run: |
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export const options = {
            stages: [
              { duration: '30s', target: ${{ github.event.inputs.concurrent_users }} },
              { duration: '${{ github.event.inputs.duration }}', target: ${{ github.event.inputs.concurrent_users }} },
              { duration: '30s', target: 0 },
            ],
          };

          export default function () {
            // Teste do endpoint de documentação
            const docsResponse = http.get('${{ github.event.inputs.target_url }}/docs');
            check(docsResponse, {
              'docs status is 200': (r) => r.status === 200,
              'docs response time < 2s': (r) => r.timings.duration < 2000,
            });

            // Teste do endpoint principal
            const payload = JSON.stringify({
              firstDate: '2023-01-01',
              lastDate: '2023-01-31'
            });
            
            const params = {
              headers: {
                'Content-Type': 'application/json',
              },
            };
            
            const processarResponse = http.post('${{ github.event.inputs.target_url }}/processar', payload, params);
            check(processarResponse, {
              'processar status is 200 or 400': (r) => [200, 400].includes(r.status),
              'processar response time < 5s': (r) => r.timings.duration < 5000,
            });
            
            sleep(1);
          }
          EOF

      - name: 🚀 Executar teste de performance
        run: |
          k6 run --out json=performance-results.json performance-test.js

      - name: 📊 Processar resultados
        run: |
          echo "## 📊 Resultados do Teste de Performance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL Testada:** ${{ github.event.inputs.target_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duração:** ${{ github.event.inputs.duration }}" >> $GITHUB_STEP_SUMMARY
          echo "**Usuários Simultâneos:** ${{ github.event.inputs.concurrent_users }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extrair métricas básicas
          if [ -f performance-results.json ]; then
            echo "**Estatísticas:** Veja o arquivo de resultados completo nos artefatos" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload dos resultados
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-results.json
            performance-test.js